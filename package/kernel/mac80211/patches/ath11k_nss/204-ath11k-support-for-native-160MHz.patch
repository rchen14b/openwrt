--- a/drivers/net/wireless/ath/ath11k/mac.c 23-12-27 05:48:12.809597795 +0000
+++ b/drivers/net/wireless/ath/ath11k/mac.c 23-12-27 05:48:12.809597795 +0000
@@ -5666,6 +5666,12 @@
 	vht_cap.vht_mcs.rx_mcs_map = cpu_to_le16(rxmcs_map);
 	vht_cap.vht_mcs.tx_mcs_map = cpu_to_le16(txmcs_map);
 
+        /* Check if the HW supports 1:1 NSS ratio and reset
+         * EXT NSS BW Support field to 0 to indicate 1:1 ratio
+         */
+        if (ar->pdev->cap.nss_ratio_info == WMI_NSS_RATIO_1_NSS)
+                vht_cap.cap &= ~IEEE80211_VHT_CAP_EXT_NSS_BW_MASK;
+
 	return vht_cap;
 }
 
@@ -5847,11 +5853,12 @@
 				    struct ieee80211_sta_he_cap *he_cap,
 				    int band)
 {
-	u16 txmcs_map, rxmcs_map;
 	u32 i;
+        u16 txmcs_map = 0, rxmcs_map = 0;
+        u16 txmcs_map_160 = 0, rxmcs_map_160 = 0;
+        u8 maxtxnss_160 = ath11k_get_nss_160mhz(ar, ar->num_tx_chains);
+        u8 maxrxnss_160 = ath11k_get_nss_160mhz(ar, ar->num_rx_chains);
 
-	rxmcs_map = 0;
-	txmcs_map = 0;
 	for (i = 0; i < 8; i++) {
 		if (i < ar->num_tx_chains &&
 		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
@@ -5864,19 +5871,31 @@
 			rxmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
 		else
 			rxmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+ 
+                if (i < maxtxnss_160 &&
+                    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+                        txmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+                else
+                        txmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+ 
+                if (i < maxrxnss_160 &&
+                    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+                        rxmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+                else
+                        rxmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
 	}
 	he_cap->he_mcs_nss_supp.rx_mcs_80 =
 		cpu_to_le16(rxmcs_map & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_80 =
 		cpu_to_le16(txmcs_map & 0xffff);
 	he_cap->he_mcs_nss_supp.rx_mcs_160 =
-		cpu_to_le16(rxmcs_map & 0xffff);
+		cpu_to_le16(rxmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_160 =
-		cpu_to_le16(txmcs_map & 0xffff);
+		cpu_to_le16(txmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.rx_mcs_80p80 =
-		cpu_to_le16(rxmcs_map & 0xffff);
+		cpu_to_le16(rxmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_80p80 =
-		cpu_to_le16(txmcs_map & 0xffff);
+		cpu_to_le16(txmcs_map_160 & 0xffff);
 }
 
 static int ath11k_mac_copy_he_cap(struct ath11k *ar,
